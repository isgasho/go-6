package operator

// Code generated by (tawesoft.co.uk/go/operator) template-numbers.py: DO NOT EDIT.


type uintBinary struct {
    Add             func(uint, uint) uint
    Sub             func(uint, uint) uint
    Mul             func(uint, uint) uint
    Div             func(uint, uint) uint
    Mod             func(uint, uint) uint
    
    And             func(uint, uint) uint
    Or              func(uint, uint) uint
    Xor             func(uint, uint) uint
    AndNot          func(uint, uint) uint
    
    Shl             func(uint, uint) uint
    Shr             func(uint, uint) uint
}

type uintBinaryChecked struct {
    Add             func(uint, uint) (uint, error)
    Sub             func(uint, uint) (uint, error)
    Mul             func(uint, uint) (uint, error)
    
    Shl             func(uint, uint) (uint, error)
    Shr             func(uint, uint) (uint, error)
}

var Uint = struct {
    Binary          uintBinary
}{
    Binary:          uintBinary{
        Add:        func(a uint, b uint) uint { return a + b },
        Sub:        func(a uint, b uint) uint { return a - b },
        Mul:        func(a uint, b uint) uint { return a * b },
        Div:        func(a uint, b uint) uint { return a / b },
        
        And:        func(a uint, b uint) uint { return a & b },
        Or:         func(a uint, b uint) uint { return a | b },
        Xor:        func(a uint, b uint) uint { return a ^ b },
        AndNot:     func(a uint, b uint) uint { return a &^ b },
        Mod:        func(a uint, b uint) uint { return a % b },
        
        Shl:        func(a uint, b uint) uint { return a << b },
        Shr:        func(a uint, b uint) uint { return a >> b },
    },
}

var UintChecked = struct {
    Binary          uintBinaryChecked
}{
    Binary:         uintBinaryChecked{
        Add:        uintBinaryCheckedAdd,
        Sub:        uintBinaryCheckedSub,
        Mul:        uintBinaryCheckedMul,
        Shl:        uintBinaryCheckedShl,
    },
}

func uintBinaryCheckedAdd(a uint, b uint) (v uint, err error) {
    if (b > 0) && (a > (maxUint - b)) { return v, ErrorOverflow }
    if (b < 0) && (a < (minUint - b)) { return v, ErrorOverflow }
    return a + b, nil
}

func uintBinaryCheckedSub(a uint, b uint) (v uint, err error) {
    if (b < 0) && (a > (maxUint + b)) { return v, ErrorOverflow }
    if (b > 0) && (a < (minUint + b)) { return v, ErrorOverflow }
    return a - b, nil
}

func uintBinaryCheckedMul(a uint, b uint) (v uint, err error) {
    if (a > (maxUint / b)) { return v, ErrorOverflow }
    if (a < (minUint / b)) { return v, ErrorOverflow }
    
    return a * b, nil
}

func uintBinaryCheckedShl(a uint, b uint) (v uint, err error) {
    if b > uint(uintMostSignificantBit(maxUint)) { return v, ErrorOverflow }
    return v, err
}

func uintMostSignificantBit(a uint) (result int) {
  for a > 0 {
      a >>= 1
      result++
  }
  return result;
}

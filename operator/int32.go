package operator

// Code generated by (tawesoft.co.uk/go/operator) template-numbers.py: DO NOT EDIT.


type int32Binary struct {
    Add             func(int32, int32) int32
    Sub             func(int32, int32) int32
    Mul             func(int32, int32) int32
    Div             func(int32, int32) int32
    Mod             func(int32, int32) int32
    
    And             func(int32, int32) int32
    Or              func(int32, int32) int32
    Xor             func(int32, int32) int32
    AndNot          func(int32, int32) int32
    
    Shl             func(int32, uint) int32
    Shr             func(int32, uint) int32
}

type int32BinaryChecked struct {
    Add             func(int32, int32) (int32, error)
    Sub             func(int32, int32) (int32, error)
    Mul             func(int32, int32) (int32, error)
    
    Shl             func(int32, uint) (int32, error)
    Shr             func(int32, uint) (int32, error)
}

var Int32 = struct {
    Binary          int32Binary
}{
    Binary:          int32Binary{
        Add:        func(a int32, b int32) int32 { return a + b },
        Sub:        func(a int32, b int32) int32 { return a - b },
        Mul:        func(a int32, b int32) int32 { return a * b },
        Div:        func(a int32, b int32) int32 { return a / b },
        
        And:        func(a int32, b int32) int32 { return a & b },
        Or:         func(a int32, b int32) int32 { return a | b },
        Xor:        func(a int32, b int32) int32 { return a ^ b },
        AndNot:     func(a int32, b int32) int32 { return a &^ b },
        Mod:        func(a int32, b int32) int32 { return a % b },
        
        Shl:        func(a int32, b uint) int32 { return a << b },
        Shr:        func(a int32, b uint) int32 { return a >> b },
    },
}

var Int32Checked = struct {
    Binary          int32BinaryChecked
}{
    Binary:         int32BinaryChecked{
        Add:        int32BinaryCheckedAdd,
        Sub:        int32BinaryCheckedSub,
        Mul:        int32BinaryCheckedMul,
        Shl:        int32BinaryCheckedShl,
    },
}

func int32BinaryCheckedAdd(a int32, b int32) (v int32, err error) {
    if (b > 0) && (a > (maxInt32 - b)) { return v, ErrorOverflow }
    if (b < 0) && (a < (minInt32 - b)) { return v, ErrorOverflow }
    return a + b, nil
}

func int32BinaryCheckedSub(a int32, b int32) (v int32, err error) {
    if (b < 0) && (a > (maxInt32 + b)) { return v, ErrorOverflow }
    if (b > 0) && (a < (minInt32 + b)) { return v, ErrorOverflow }
    return a - b, nil
}

func int32BinaryCheckedMul(a int32, b int32) (v int32, err error) {
    if (a == -1) && (b == minInt32) { return v, ErrorOverflow }
    if (b == -1) && (a == minInt32) { return v, ErrorOverflow }
    if (a > (maxInt32 / b)) { return v, ErrorOverflow }
    if (a < (minInt32 / b)) { return v, ErrorOverflow }
    
    return a * b, nil
}

func int32BinaryCheckedShl(a int32, b uint) (v int32, err error) {
    if a < 0 { return v, ErrorUndefined }
    if b > uint(int32MostSignificantBit(maxInt32)) { return v, ErrorOverflow }
    return v, err
}

func int32MostSignificantBit(a int32) (result int) {
  for a > 0 {
      a >>= 1
      result++
  }
  return result;
}

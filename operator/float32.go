package operator

// Code generated by (tawesoft.co.uk/go/operator) template-numbers.py: DO NOT EDIT.


type float32Binary struct {
    Add             func(float32, float32) float32
    Sub             func(float32, float32) float32
    Mul             func(float32, float32) float32
    Div             func(float32, float32) float32
    Mod             func(float32, float32) float32
    
    And             func(float32, float32) float32
    Or              func(float32, float32) float32
    Xor             func(float32, float32) float32
    AndNot          func(float32, float32) float32
    
    Shl             func(float32, uint) float32
    Shr             func(float32, uint) float32
}

type float32BinaryChecked struct {
    Add             func(float32, float32) (float32, error)
    Sub             func(float32, float32) (float32, error)
    Mul             func(float32, float32) (float32, error)
    
    Shl             func(float32, uint) (float32, error)
    Shr             func(float32, uint) (float32, error)
}

var Float32 = struct {
    Binary          float32Binary
}{
    Binary:          float32Binary{
        Add:        func(a float32, b float32) float32 { return a + b },
        Sub:        func(a float32, b float32) float32 { return a - b },
        Mul:        func(a float32, b float32) float32 { return a * b },
        Div:        func(a float32, b float32) float32 { return a / b },
        
        
    },
}

var Float32Checked = struct {
    Binary          float32BinaryChecked
}{
    Binary:         float32BinaryChecked{
        Add:        float32BinaryCheckedAdd,
        Sub:        float32BinaryCheckedSub,
        Mul:        float32BinaryCheckedMul,
    },
}

func float32BinaryCheckedAdd(a float32, b float32) (v float32, err error) {
    if (b > 0) && (a > (maxFloat32 - b)) { return v, ErrorOverflow }
    if (b < 0) && (a < (minFloat32 - b)) { return v, ErrorOverflow }
    return a + b, nil
}

func float32BinaryCheckedSub(a float32, b float32) (v float32, err error) {
    if (b < 0) && (a > (maxFloat32 + b)) { return v, ErrorOverflow }
    if (b > 0) && (a < (minFloat32 + b)) { return v, ErrorOverflow }
    return a - b, nil
}

func float32BinaryCheckedMul(a float32, b float32) (v float32, err error) {
    if (a > (maxFloat32 / b)) { return v, ErrorOverflow }
    if (a < (minFloat32 / b)) { return v, ErrorOverflow }
    
    return a * b, nil
}



package operator

// Code generated by (tawesoft.co.uk/go/operator) template-numbers.py: DO NOT EDIT.


type uint8Binary struct {
    Add             func(uint8, uint8) uint8
    Sub             func(uint8, uint8) uint8
    Mul             func(uint8, uint8) uint8
    Div             func(uint8, uint8) uint8
    Mod             func(uint8, uint8) uint8
    
    And             func(uint8, uint8) uint8
    Or              func(uint8, uint8) uint8
    Xor             func(uint8, uint8) uint8
    AndNot          func(uint8, uint8) uint8
    
    Shl             func(uint8, uint) uint8
    Shr             func(uint8, uint) uint8
}

type uint8BinaryChecked struct {
    Add             func(uint8, uint8) (uint8, error)
    Sub             func(uint8, uint8) (uint8, error)
    Mul             func(uint8, uint8) (uint8, error)
    
    Shl             func(uint8, uint) (uint8, error)
    Shr             func(uint8, uint) (uint8, error)
}

var Uint8 = struct {
    Binary          uint8Binary
}{
    Binary:          uint8Binary{
        Add:        func(a uint8, b uint8) uint8 { return a + b },
        Sub:        func(a uint8, b uint8) uint8 { return a - b },
        Mul:        func(a uint8, b uint8) uint8 { return a * b },
        Div:        func(a uint8, b uint8) uint8 { return a / b },
        
        And:        func(a uint8, b uint8) uint8 { return a & b },
        Or:         func(a uint8, b uint8) uint8 { return a | b },
        Xor:        func(a uint8, b uint8) uint8 { return a ^ b },
        AndNot:     func(a uint8, b uint8) uint8 { return a &^ b },
        Mod:        func(a uint8, b uint8) uint8 { return a % b },
        
        Shl:        func(a uint8, b uint) uint8 { return a << b },
        Shr:        func(a uint8, b uint) uint8 { return a >> b },
    },
}

var Uint8Checked = struct {
    Binary          uint8BinaryChecked
}{
    Binary:         uint8BinaryChecked{
        Add:        uint8BinaryCheckedAdd,
        Sub:        uint8BinaryCheckedSub,
        Mul:        uint8BinaryCheckedMul,
        Shl:        uint8BinaryCheckedShl,
    },
}

func uint8BinaryCheckedAdd(a uint8, b uint8) (v uint8, err error) {
    if (b > 0) && (a > (maxUint8 - b)) { return v, ErrorOverflow }
    if (b < 0) && (a < (minUint8 - b)) { return v, ErrorOverflow }
    return a + b, nil
}

func uint8BinaryCheckedSub(a uint8, b uint8) (v uint8, err error) {
    if (b < 0) && (a > (maxUint8 + b)) { return v, ErrorOverflow }
    if (b > 0) && (a < (minUint8 + b)) { return v, ErrorOverflow }
    return a - b, nil
}

func uint8BinaryCheckedMul(a uint8, b uint8) (v uint8, err error) {
    if (a > (maxUint8 / b)) { return v, ErrorOverflow }
    if (a < (minUint8 / b)) { return v, ErrorOverflow }
    
    return a * b, nil
}

func uint8BinaryCheckedShl(a uint8, b uint) (v uint8, err error) {
    if b > uint(uint8MostSignificantBit(maxUint8)) { return v, ErrorOverflow }
    return v, err
}

func uint8MostSignificantBit(a uint8) (result int) {
  for a > 0 {
      a >>= 1
      result++
  }
  return result;
}

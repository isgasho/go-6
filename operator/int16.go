package operator

// Code generated by (tawesoft.co.uk/go/operator) template-numbers.py: DO NOT EDIT.


type int16Binary struct {
    Add             func(int16, int16) int16
    Sub             func(int16, int16) int16
    Mul             func(int16, int16) int16
    Div             func(int16, int16) int16
    Mod             func(int16, int16) int16
    
    And             func(int16, int16) int16
    Or              func(int16, int16) int16
    Xor             func(int16, int16) int16
    AndNot          func(int16, int16) int16
    
    Shl             func(int16, uint) int16
    Shr             func(int16, uint) int16
}

type int16BinaryChecked struct {
    Add             func(int16, int16) (int16, error)
    Sub             func(int16, int16) (int16, error)
    Mul             func(int16, int16) (int16, error)
    
    Shl             func(int16, uint) (int16, error)
    Shr             func(int16, uint) (int16, error)
}

var Int16 = struct {
    Binary          int16Binary
}{
    Binary:          int16Binary{
        Add:        func(a int16, b int16) int16 { return a + b },
        Sub:        func(a int16, b int16) int16 { return a - b },
        Mul:        func(a int16, b int16) int16 { return a * b },
        Div:        func(a int16, b int16) int16 { return a / b },
        
        And:        func(a int16, b int16) int16 { return a & b },
        Or:         func(a int16, b int16) int16 { return a | b },
        Xor:        func(a int16, b int16) int16 { return a ^ b },
        AndNot:     func(a int16, b int16) int16 { return a &^ b },
        Mod:        func(a int16, b int16) int16 { return a % b },
        
        Shl:        func(a int16, b uint) int16 { return a << b },
        Shr:        func(a int16, b uint) int16 { return a >> b },
    },
}

var Int16Checked = struct {
    Binary          int16BinaryChecked
}{
    Binary:         int16BinaryChecked{
        Add:        int16BinaryCheckedAdd,
        Sub:        int16BinaryCheckedSub,
        Mul:        int16BinaryCheckedMul,
        Shl:        int16BinaryCheckedShl,
    },
}

func int16BinaryCheckedAdd(a int16, b int16) (v int16, err error) {
    if (b > 0) && (a > (maxInt16 - b)) { return v, ErrorOverflow }
    if (b < 0) && (a < (minInt16 - b)) { return v, ErrorOverflow }
    return a + b, nil
}

func int16BinaryCheckedSub(a int16, b int16) (v int16, err error) {
    if (b < 0) && (a > (maxInt16 + b)) { return v, ErrorOverflow }
    if (b > 0) && (a < (minInt16 + b)) { return v, ErrorOverflow }
    return a - b, nil
}

func int16BinaryCheckedMul(a int16, b int16) (v int16, err error) {
    if (a == -1) && (b == minInt16) { return v, ErrorOverflow }
    if (b == -1) && (a == minInt16) { return v, ErrorOverflow }
    if (a > (maxInt16 / b)) { return v, ErrorOverflow }
    if (a < (minInt16 / b)) { return v, ErrorOverflow }
    
    return a * b, nil
}

func int16BinaryCheckedShl(a int16, b uint) (v int16, err error) {
    if a < 0 { return v, ErrorUndefined }
    if b > uint(int16MostSignificantBit(maxInt16)) { return v, ErrorOverflow }
    return v, err
}

func int16MostSignificantBit(a int16) (result int) {
  for a > 0 {
      a >>= 1
      result++
  }
  return result;
}

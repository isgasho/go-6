package operator

// Code generated by (tawesoft.co.uk/go/operator) template-numbers.py: DO NOT EDIT.



type uint16Unary struct {
    Identity        func(uint16) uint16
    Not             func(uint16) uint16
    Zero            func(uint16) bool
    NonZero         func(uint16) bool
    Positive        func(uint16) bool
    Negative        func(uint16) bool
}

type uint16UnaryChecked struct {
}

type uint16Binary struct {
    Add             func(uint16, uint16) uint16
    Sub             func(uint16, uint16) uint16
    Mul             func(uint16, uint16) uint16
    Div             func(uint16, uint16) uint16
    Mod             func(uint16, uint16) uint16
    
    Eq              func(uint16, uint16) bool
    Neq             func(uint16, uint16) bool
    Lt              func(uint16, uint16) bool
    Lte             func(uint16, uint16) bool
    Gt              func(uint16, uint16) bool
    Gte             func(uint16, uint16) bool
    
    And             func(uint16, uint16) uint16
    Or              func(uint16, uint16) uint16
    Xor             func(uint16, uint16) uint16
    AndNot          func(uint16, uint16) uint16
    
    Shl             func(uint16, uint) uint16
    Shr             func(uint16, uint) uint16
}

type uint16BinaryChecked struct {
    Add             func(uint16, uint16) (uint16, error)
    Sub             func(uint16, uint16) (uint16, error)
    Mul             func(uint16, uint16) (uint16, error)
    
    Shl             func(uint16, uint) (uint16, error)
    Shr             func(uint16, uint) (uint16, error)
}

type uint16Nary struct {
    Add             func(... uint16) uint16
    Sub             func(... uint16) uint16
    Mul             func(... uint16) uint16
}

type uint16NaryChecked struct {
    Add             func(... uint16) (uint16, error)
    Sub             func(... uint16) (uint16, error)
    Mul             func(... uint16) (uint16, error)
}

var Uint16 = struct {
    Unary           uint16Unary
    Binary          uint16Binary
    Nary            uint16Nary
}{
    Unary:          uint16Unary{
        Identity:   func(a uint16) uint16 { return a },
        Not:        func(a uint16) uint16 { return ^a },
        Zero:       func(a uint16) bool { return a == 0 },
        NonZero:    func(a uint16) bool { return a != 0 },
        Positive:   uint16UnaryPositive,
        Negative:   uint16UnaryNegative,
    },
    
    Binary:          uint16Binary{
        Add:        func(a uint16, b uint16) uint16 { return a + b },
        Sub:        func(a uint16, b uint16) uint16 { return a - b },
        Mul:        func(a uint16, b uint16) uint16 { return a * b },
        Div:        func(a uint16, b uint16) uint16 { return a / b },
        
        Eq:         func(a uint16, b uint16) bool { return a == b },
        Neq:        func(a uint16, b uint16) bool { return a != b },
        Lt:         func(a uint16, b uint16) bool { return a <  b },
        Lte:        func(a uint16, b uint16) bool { return a <= b },
        Gt:         func(a uint16, b uint16) bool { return a >  b },
        Gte:        func(a uint16, b uint16) bool { return a >= b },
        
        And:        func(a uint16, b uint16) uint16 { return a & b },
        Or:         func(a uint16, b uint16) uint16 { return a | b },
        Xor:        func(a uint16, b uint16) uint16 { return a ^ b },
        AndNot:     func(a uint16, b uint16) uint16 { return a &^ b },
        Mod:        func(a uint16, b uint16) uint16 { return a % b },
        
        Shl:        func(a uint16, b uint) uint16 { return a << b },
        Shr:        func(a uint16, b uint) uint16 { return a >> b },
    },
    
    Nary:           uint16Nary{
        Add:        uint16NaryAdd,
        Mul:        uint16NaryMul,
    },
}

var Uint16Checked = struct {
    Unary           uint16UnaryChecked
    Binary          uint16BinaryChecked
    Nary            uint16NaryChecked
}{
    Unary:          uint16UnaryChecked{
    },
    
    Binary:         uint16BinaryChecked{
        Add:        uint16BinaryCheckedAdd,
        Sub:        uint16BinaryCheckedSub,
        Mul:        uint16BinaryCheckedMul,
        Shl:        uint16BinaryCheckedShl,
    },
    
    Nary:           uint16NaryChecked{
        Add:        uint16NaryCheckedAdd,
        Mul:        uint16NaryCheckedMul,
    },
}

func uint16UnaryPositive(a uint16) bool {
    return a > 0
}

func uint16UnaryNegative(a uint16) bool {
    return a < 0
}




func uint16BinaryCheckedAdd(a uint16, b uint16) (v uint16, err error) {
    if (b > 0) && (a > (maxUint16 - b)) { return v, ErrorOverflow }
    if (b < 0) && (a < (minUint16 - b)) { return v, ErrorOverflow }
    return a + b, nil
}

func uint16BinaryCheckedSub(a uint16, b uint16) (v uint16, err error) {
    if (b < 0) && (a > (maxUint16 + b)) { return v, ErrorOverflow }
    if (b > 0) && (a < (minUint16 + b)) { return v, ErrorOverflow }
    return a - b, nil
}

func uint16BinaryCheckedMul(a uint16, b uint16) (v uint16, err error) {
    if (a > (maxUint16 / b)) { return v, ErrorOverflow }
    if (a < (minUint16 / b)) { return v, ErrorOverflow }
    
    return a * b, nil
}

func uint16BinaryCheckedShl(a uint16, b uint) (v uint16, err error) {
    if b > uint(uint16MostSignificantBit(maxUint16)) { return v, ErrorOverflow }
    return v, err
}

func uint16MostSignificantBit(a uint16) (result int) {
  for a > 0 {
      a >>= 1
      result++
  }
  return result;
}

func uint16NaryAdd(xs ... uint16) (result uint16) {
    for i := 0; i < len(xs); i++ {
        result += xs[i]
    }
    return result
}

func uint16NaryCheckedAdd(xs ... uint16) (result uint16, err error) {
    for i := 0; i < len(xs); i++ {
        result, err = uint16BinaryCheckedAdd(result, xs[i])
        if err != nil { return result, err }
    }
    return result, nil
}

func uint16NaryMul(xs ... uint16) (result uint16) {
    result = 1
    for i := 0; i < len(xs); i++ {
        result *= xs[i]
    }
    return result
}

func uint16NaryCheckedMul(xs ... uint16) (result uint16, err error) {
    result = 1
    for i := 0; i < len(xs); i++ {
        result, err = uint16BinaryCheckedMul(result, xs[i])
        if err != nil { return result, err }
    }
    return result, nil
}


package operator

// Code generated by (tawesoft.co.uk/go/operator) template-numbers.py: DO NOT EDIT.


type uint16Binary struct {
    Add             func(uint16, uint16) uint16
    Sub             func(uint16, uint16) uint16
    Mul             func(uint16, uint16) uint16
    Div             func(uint16, uint16) uint16
    Mod             func(uint16, uint16) uint16
    
    And             func(uint16, uint16) uint16
    Or              func(uint16, uint16) uint16
    Xor             func(uint16, uint16) uint16
    AndNot          func(uint16, uint16) uint16
    
    Shl             func(uint16, uint) uint16
    Shr             func(uint16, uint) uint16
}

type uint16BinaryChecked struct {
    Add             func(uint16, uint16) (uint16, error)
    Sub             func(uint16, uint16) (uint16, error)
    Mul             func(uint16, uint16) (uint16, error)
    
    Shl             func(uint16, uint) (uint16, error)
    Shr             func(uint16, uint) (uint16, error)
}

var Uint16 = struct {
    Binary          uint16Binary
}{
    Binary:          uint16Binary{
        Add:        func(a uint16, b uint16) uint16 { return a + b },
        Sub:        func(a uint16, b uint16) uint16 { return a - b },
        Mul:        func(a uint16, b uint16) uint16 { return a * b },
        Div:        func(a uint16, b uint16) uint16 { return a / b },
        
        And:        func(a uint16, b uint16) uint16 { return a & b },
        Or:         func(a uint16, b uint16) uint16 { return a | b },
        Xor:        func(a uint16, b uint16) uint16 { return a ^ b },
        AndNot:     func(a uint16, b uint16) uint16 { return a &^ b },
        Mod:        func(a uint16, b uint16) uint16 { return a % b },
        
        Shl:        func(a uint16, b uint) uint16 { return a << b },
        Shr:        func(a uint16, b uint) uint16 { return a >> b },
    },
}

var Uint16Checked = struct {
    Binary          uint16BinaryChecked
}{
    Binary:         uint16BinaryChecked{
        Add:        uint16BinaryCheckedAdd,
        Sub:        uint16BinaryCheckedSub,
        Mul:        uint16BinaryCheckedMul,
        Shl:        uint16BinaryCheckedShl,
    },
}

func uint16BinaryCheckedAdd(a uint16, b uint16) (v uint16, err error) {
    if (b > 0) && (a > (maxUint16 - b)) { return v, ErrorOverflow }
    if (b < 0) && (a < (minUint16 - b)) { return v, ErrorOverflow }
    return a + b, nil
}

func uint16BinaryCheckedSub(a uint16, b uint16) (v uint16, err error) {
    if (b < 0) && (a > (maxUint16 + b)) { return v, ErrorOverflow }
    if (b > 0) && (a < (minUint16 + b)) { return v, ErrorOverflow }
    return a - b, nil
}

func uint16BinaryCheckedMul(a uint16, b uint16) (v uint16, err error) {
    if (a > (maxUint16 / b)) { return v, ErrorOverflow }
    if (a < (minUint16 / b)) { return v, ErrorOverflow }
    
    return a * b, nil
}

func uint16BinaryCheckedShl(a uint16, b uint) (v uint16, err error) {
    if b > uint(uint16MostSignificantBit(maxUint16)) { return v, ErrorOverflow }
    return v, err
}

func uint16MostSignificantBit(a uint16) (result int) {
  for a > 0 {
      a >>= 1
      result++
  }
  return result;
}

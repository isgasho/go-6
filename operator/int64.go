package operator

// Code generated by (tawesoft.co.uk/go/operator) template-numbers.py: DO NOT EDIT.


type int64Binary struct {
    Add             func(int64, int64) int64
    Sub             func(int64, int64) int64
    Mul             func(int64, int64) int64
    Div             func(int64, int64) int64
    Mod             func(int64, int64) int64
    
    And             func(int64, int64) int64
    Or              func(int64, int64) int64
    Xor             func(int64, int64) int64
    AndNot          func(int64, int64) int64
    
    Shl             func(int64, uint) int64
    Shr             func(int64, uint) int64
}

type int64BinaryChecked struct {
    Add             func(int64, int64) (int64, error)
    Sub             func(int64, int64) (int64, error)
    Mul             func(int64, int64) (int64, error)
    
    Shl             func(int64, uint) (int64, error)
    Shr             func(int64, uint) (int64, error)
}

var Int64 = struct {
    Binary          int64Binary
}{
    Binary:          int64Binary{
        Add:        func(a int64, b int64) int64 { return a + b },
        Sub:        func(a int64, b int64) int64 { return a - b },
        Mul:        func(a int64, b int64) int64 { return a * b },
        Div:        func(a int64, b int64) int64 { return a / b },
        
        And:        func(a int64, b int64) int64 { return a & b },
        Or:         func(a int64, b int64) int64 { return a | b },
        Xor:        func(a int64, b int64) int64 { return a ^ b },
        AndNot:     func(a int64, b int64) int64 { return a &^ b },
        Mod:        func(a int64, b int64) int64 { return a % b },
        
        Shl:        func(a int64, b uint) int64 { return a << b },
        Shr:        func(a int64, b uint) int64 { return a >> b },
    },
}

var Int64Checked = struct {
    Binary          int64BinaryChecked
}{
    Binary:         int64BinaryChecked{
        Add:        int64BinaryCheckedAdd,
        Sub:        int64BinaryCheckedSub,
        Mul:        int64BinaryCheckedMul,
        Shl:        int64BinaryCheckedShl,
    },
}

func int64BinaryCheckedAdd(a int64, b int64) (v int64, err error) {
    if (b > 0) && (a > (maxInt64 - b)) { return v, ErrorOverflow }
    if (b < 0) && (a < (minInt64 - b)) { return v, ErrorOverflow }
    return a + b, nil
}

func int64BinaryCheckedSub(a int64, b int64) (v int64, err error) {
    if (b < 0) && (a > (maxInt64 + b)) { return v, ErrorOverflow }
    if (b > 0) && (a < (minInt64 + b)) { return v, ErrorOverflow }
    return a - b, nil
}

func int64BinaryCheckedMul(a int64, b int64) (v int64, err error) {
    if (a == -1) && (b == minInt64) { return v, ErrorOverflow }
    if (b == -1) && (a == minInt64) { return v, ErrorOverflow }
    if (a > (maxInt64 / b)) { return v, ErrorOverflow }
    if (a < (minInt64 / b)) { return v, ErrorOverflow }
    
    return a * b, nil
}

func int64BinaryCheckedShl(a int64, b uint) (v int64, err error) {
    if a < 0 { return v, ErrorUndefined }
    if b > uint(int64MostSignificantBit(maxInt64)) { return v, ErrorOverflow }
    return v, err
}

func int64MostSignificantBit(a int64) (result int) {
  for a > 0 {
      a >>= 1
      result++
  }
  return result;
}

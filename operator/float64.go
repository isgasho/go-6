package operator

// Code generated by (tawesoft.co.uk/go/operator) template-numbers.py: DO NOT EDIT.


type float64Binary struct {
    Add             func(float64, float64) float64
    Sub             func(float64, float64) float64
    Mul             func(float64, float64) float64
    Div             func(float64, float64) float64
    Mod             func(float64, float64) float64
    
    And             func(float64, float64) float64
    Or              func(float64, float64) float64
    Xor             func(float64, float64) float64
    AndNot          func(float64, float64) float64
    
    Shl             func(float64, uint) float64
    Shr             func(float64, uint) float64
}

type float64BinaryChecked struct {
    Add             func(float64, float64) (float64, error)
    Sub             func(float64, float64) (float64, error)
    Mul             func(float64, float64) (float64, error)
    
    Shl             func(float64, uint) (float64, error)
    Shr             func(float64, uint) (float64, error)
}

var Float64 = struct {
    Binary          float64Binary
}{
    Binary:          float64Binary{
        Add:        func(a float64, b float64) float64 { return a + b },
        Sub:        func(a float64, b float64) float64 { return a - b },
        Mul:        func(a float64, b float64) float64 { return a * b },
        Div:        func(a float64, b float64) float64 { return a / b },
        
        
    },
}

var Float64Checked = struct {
    Binary          float64BinaryChecked
}{
    Binary:         float64BinaryChecked{
        Add:        float64BinaryCheckedAdd,
        Sub:        float64BinaryCheckedSub,
        Mul:        float64BinaryCheckedMul,
    },
}

func float64BinaryCheckedAdd(a float64, b float64) (v float64, err error) {
    if (b > 0) && (a > (maxFloat64 - b)) { return v, ErrorOverflow }
    if (b < 0) && (a < (minFloat64 - b)) { return v, ErrorOverflow }
    return a + b, nil
}

func float64BinaryCheckedSub(a float64, b float64) (v float64, err error) {
    if (b < 0) && (a > (maxFloat64 + b)) { return v, ErrorOverflow }
    if (b > 0) && (a < (minFloat64 + b)) { return v, ErrorOverflow }
    return a - b, nil
}

func float64BinaryCheckedMul(a float64, b float64) (v float64, err error) {
    if (a > (maxFloat64 / b)) { return v, ErrorOverflow }
    if (a < (minFloat64 / b)) { return v, ErrorOverflow }
    
    return a * b, nil
}



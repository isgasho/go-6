package operator

// Code generated by (tawesoft.co.uk/go/operator) template-numbers.py: DO NOT EDIT.


type uint32Binary struct {
    Add             func(uint32, uint32) uint32
    Sub             func(uint32, uint32) uint32
    Mul             func(uint32, uint32) uint32
    Div             func(uint32, uint32) uint32
    Mod             func(uint32, uint32) uint32
    
    And             func(uint32, uint32) uint32
    Or              func(uint32, uint32) uint32
    Xor             func(uint32, uint32) uint32
    AndNot          func(uint32, uint32) uint32
    
    Shl             func(uint32, uint) uint32
    Shr             func(uint32, uint) uint32
}

type uint32BinaryChecked struct {
    Add             func(uint32, uint32) (uint32, error)
    Sub             func(uint32, uint32) (uint32, error)
    Mul             func(uint32, uint32) (uint32, error)
    
    Shl             func(uint32, uint) (uint32, error)
    Shr             func(uint32, uint) (uint32, error)
}

var Uint32 = struct {
    Binary          uint32Binary
}{
    Binary:          uint32Binary{
        Add:        func(a uint32, b uint32) uint32 { return a + b },
        Sub:        func(a uint32, b uint32) uint32 { return a - b },
        Mul:        func(a uint32, b uint32) uint32 { return a * b },
        Div:        func(a uint32, b uint32) uint32 { return a / b },
        
        And:        func(a uint32, b uint32) uint32 { return a & b },
        Or:         func(a uint32, b uint32) uint32 { return a | b },
        Xor:        func(a uint32, b uint32) uint32 { return a ^ b },
        AndNot:     func(a uint32, b uint32) uint32 { return a &^ b },
        Mod:        func(a uint32, b uint32) uint32 { return a % b },
        
        Shl:        func(a uint32, b uint) uint32 { return a << b },
        Shr:        func(a uint32, b uint) uint32 { return a >> b },
    },
}

var Uint32Checked = struct {
    Binary          uint32BinaryChecked
}{
    Binary:         uint32BinaryChecked{
        Add:        uint32BinaryCheckedAdd,
        Sub:        uint32BinaryCheckedSub,
        Mul:        uint32BinaryCheckedMul,
        Shl:        uint32BinaryCheckedShl,
    },
}

func uint32BinaryCheckedAdd(a uint32, b uint32) (v uint32, err error) {
    if (b > 0) && (a > (maxUint32 - b)) { return v, ErrorOverflow }
    if (b < 0) && (a < (minUint32 - b)) { return v, ErrorOverflow }
    return a + b, nil
}

func uint32BinaryCheckedSub(a uint32, b uint32) (v uint32, err error) {
    if (b < 0) && (a > (maxUint32 + b)) { return v, ErrorOverflow }
    if (b > 0) && (a < (minUint32 + b)) { return v, ErrorOverflow }
    return a - b, nil
}

func uint32BinaryCheckedMul(a uint32, b uint32) (v uint32, err error) {
    if (a > (maxUint32 / b)) { return v, ErrorOverflow }
    if (a < (minUint32 / b)) { return v, ErrorOverflow }
    
    return a * b, nil
}

func uint32BinaryCheckedShl(a uint32, b uint) (v uint32, err error) {
    if b > uint(uint32MostSignificantBit(maxUint32)) { return v, ErrorOverflow }
    return v, err
}

func uint32MostSignificantBit(a uint32) (result int) {
  for a > 0 {
      a >>= 1
      result++
  }
  return result;
}
